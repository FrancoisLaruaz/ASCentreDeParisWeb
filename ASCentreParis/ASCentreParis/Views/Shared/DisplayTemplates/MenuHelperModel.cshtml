@model MvcSiteMapProvider.Web.Html.Models.MenuHelperModel
@using System.Web.Mvc.Html
@using MvcSiteMapProvider.Web.Html.Models
@helper TopMenu(List<SiteMapNodeModel> nodeList)
{
    <ul class="nav navbar-nav">
        @foreach (SiteMapNodeModel node in nodeList)
        {
            string url = node.IsClickable ? node.Url : "#";
            if (!node.Children.Any())
            {
                <li>
                    <a href="@url">
                        <span @( !string.IsNullOrEmpty(node.ImageUrl) ? ("class=" + node.ImageUrl.TrimStart('/')) : string.Empty)></span>
                        @node.Title
                    </a>
                </li>
            }
            else
            {
                <li class="dropdown">

                    <a class="dropdown-toggle" data-toggle="dropdown" href="@url">
                        <span style="float:left" @( !string.IsNullOrEmpty(node.ImageUrl) ? ("class=" + node.ImageUrl.TrimStart('/')) : string.Empty)></span>
                        @node.Title
                        <span class="caret"></span>
                    </a>@DropDownMenu(node.Children)
                </li>
            }
            @*if (node != nodeList.Last())
                {
                    <li class="divider-vertical"></li>
                }*@
        }

        @*if (@TempData["AIDEURL"] != null && !String.IsNullOrEmpty(@TempData["AIDEURL"].ToString()))*@
      
    </ul>
}

@helper DropDownMenu(SiteMapNodeModelList nodeList)
{
    <ul class="dropdown-menu">
        @foreach (SiteMapNodeModel node in nodeList)
        {
            if (node.Title == "Separator")
            {
                <li class="divider"></li>
                continue;
            }
            string url = node.IsClickable ? node.Url : "#";
            if (!node.Children.Any())
            {
                <li>
                    <a href="@url">
                        @node.Title
                        <span style="float:right" @( !string.IsNullOrEmpty(node.ImageUrl) ? ("class=" + node.ImageUrl.TrimStart('/')) : string.Empty)></span>
                    </a>
                </li>
            }
            else
            {
                <li class="dropdown-submenu ">
                    <a href="@url">
                        @node.Title
                        <span style="float:right" @( !string.IsNullOrEmpty(node.ImageUrl) ? ("class=" + node.ImageUrl.TrimStart('/')) : string.Empty)></span>
                    </a>
                    @DropDownMenu(node.Children)
                </li>
            }
        }
    </ul>
}

@TopMenu(Model.Nodes)